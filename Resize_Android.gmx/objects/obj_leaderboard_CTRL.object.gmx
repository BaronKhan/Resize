<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Some vars we need.
//You can skip this part.
asyncdialog[0]=-1
asyncdialog[1]=-1
asyncdialog[2]=-1
senttrophy[0]=false
senttrophy[1]=false
loggedontimes=0
uname=""
utoken=""
loginrequest=-1
httprequest[0]=-1
httprequest[1]=-1
httprequest[2]=-1
httprequest[3]=-1
httprequest[4]=-1
userisawesome=false
prevscore=0
currusertype="user"
highscore[0]="(Loading)"
highscore[1]="(Loading)"
highscore[2]="(Loading)"
highscore[3]="(Loading)"
highscore[4]="(Loading)"
highscore[5]="(Loading)"
highscore[6]="(Loading)"
highscore[7]="(Loading)"
highscore[8]="(Loading)"
highscore[9]="(Loading)"
highscore[10]="(Loading)"
highscore[11]="(Loading)"
highscore[12]="(Loading)"
highscore[13]="(Loading)"
highscore[14]="(Loading)"
highscore[15]="(Loading)"
highscore[16]="(Loading)"
highscore[17]="(Loading)"
highscore[18]="(Loading)"
highscore[19]="(Loading)"
highscore[20]="(Loading)"
highscore[21]="(Loading)"
highscore[22]="(Loading)"
highscore[23]="(Loading)"
highscore[24]="(Loading)"
highscore[25]="(Loading)"
highscore[26]="(Loading)"
highscore[27]="(Loading)"
highscore[28]="(Loading)"
highscore[29]="(Loading)"
highscore[30]="(Loading)"

name[0]="(Loading)"
name[1]="(Loading)"
name[2]="(Loading)"
name[3]="(Loading)"
name[4]="(Loading)"
name[5]="(Loading)"
name[6]="(Loading)"
name[7]="(Loading)"
name[8]="(Loading)"
name[9]="(Loading)"
name[10]="(Loading)"
name[11]="(Loading)"
name[12]="(Loading)"
name[13]="(Loading)"
name[14]="(Loading)"
name[15]="(Loading)"
name[16]="(Loading)"
name[17]="(Loading)"
name[18]="(Loading)"
name[19]="(Loading)"
name[20]="(Loading)"
name[21]="(Loading)"
name[22]="(Loading)"
name[23]="(Loading)"
name[24]="(Loading)"
name[25]="(Loading)"
name[26]="(Loading)"
name[27]="(Loading)"
name[28]="(Loading)"
name[29]="(Loading)"
name[30]="(Loading)"



draw_table = true
score_to_send = 0
send_score = false
guest_name = ""


if global.timer &gt; global.best_time
{

  score_to_send = global.timer
  global.best_time = global.timer
   guest_name = get_string("You achieved a new record! Please type a name to be shown on the leaderboard:","User_"+string(round(random_range(1000,9999))))
   if gj_scores_add_guest("30315",string(score_to_send),score_to_send,"",guest_name)
   {
  show_message("Score sent successfully.")

    ini_open("Savefile.ini")
    ini_write_real("Survival","Time",score_to_send)
    ini_close()
    }
    else
    {
        show_message("Your score was not sent successfully. Please make sure you have a stable internet connection.")
    }

}
 

















//Get the highscore.
httprequest[1]=gj_scores_get("30315",30)
//Try to login automatically
//if(gj_user_autologin())
//{
    //If succesfull, get and set some things.
    //Success! Now give user a trophy.
    //gj_trophy_add("1409")
    //And init session too.
//    gj_session_open()
 //   alarm[0]=30*room_speed //Ping every 30 seconds.
    //Let's check if user was logged in earlier.
   // httprequest[2]=gj_datastore_get_user("logincount")
    //httprequest[3]=gj_user_info_fromusername(gj_user_username())
    //httprequest[4]=gj_trophy_get_id("1411")
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Ad

if global.show_ads = true
{
ads_move((global.width/2)-(ads_get_display_width(0)/2), global.height-ads_get_display_height(0), 0)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Ping session
gj_session_ping(true) //User is active.
alarm[0]=60*room_speed //Ping every 30 seconds.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check result id...
var resultid=gj_result_id();
//If this was the login request...
if(resultid==loginrequest)
{
    if(gj_result_status())
    {
        //Success! Now give user a trophy.
       // gj_trophy_add("1409")
        //And init session too.
        gj_session_open()
        alarm[0]=30*room_speed //Ping every 30 seconds.
        //Let's check if user was logged in earlier.
        //httprequest[2]=gj_datastore_get_user("logincount")
        //httprequest[3]=gj_user_info_fromusername(gj_user_username())
       // httprequest[4]=gj_trophy_get_id("1411")
    }
    else
    show_message_async(gj_result_error())
}
else if(resultid==httprequest[0]) //Score added to list (or failed...)
{
    if(gj_result_status())
    {
        //Success!
        show_message_async("You succesfully added your score to the list.")
        httprequest[1]=gj_scores_get("30315",30) //Get new highscore.
    }
    else
    show_message_async(gj_result_error())
}
else if(resultid==httprequest[1]) //If we just recieved the highscore. 
{
    if(gj_result_status())
    {
        highscore[0]=gj_result_data_field_num("score",0) //Set highscore text.
        name[0] = gj_result_data_field_num("display_name",0)
        highscore[1]=gj_result_data_field_num("score",1)
        name[1] = gj_result_data_field_num("display_name",1)
        highscore[2]=gj_result_data_field_num("score",2)
        name[2] = gj_result_data_field_num("display_name",2)
        highscore[3]=gj_result_data_field_num("score",3)
        name[3] = gj_result_data_field_num("display_name",3)
        highscore[4]=gj_result_data_field_num("score",4)
        name[4] = gj_result_data_field_num("display_name",4)
        highscore[5]=gj_result_data_field_num("score",5)
        name[5] = gj_result_data_field_num("display_name",5)
        highscore[6]=gj_result_data_field_num("score",6)
        name[6] = gj_result_data_field_num("display_name",6)
        highscore[7]=gj_result_data_field_num("score",7)
        name[7] = gj_result_data_field_num("display_name",7)
        highscore[8]=gj_result_data_field_num("score",8)
        name[8] = gj_result_data_field_num("display_name",8)
        highscore[9]=gj_result_data_field_num("score",9)
        name[9] = gj_result_data_field_num("display_name",9)
        highscore[10]=gj_result_data_field_num("score",10)
        name[10] = gj_result_data_field_num("display_name",10)
        highscore[11]=gj_result_data_field_num("score",11)
        name[11] = gj_result_data_field_num("display_name",11)
        highscore[12]=gj_result_data_field_num("score",12)
        name[12] = gj_result_data_field_num("display_name",12)
        highscore[13]=gj_result_data_field_num("score",13)
        name[13] = gj_result_data_field_num("display_name",13)
        highscore[14]=gj_result_data_field_num("score",14)
        name[14] = gj_result_data_field_num("display_name",14)
        highscore[15]=gj_result_data_field_num("score",15)
        name[15] = gj_result_data_field_num("display_name",15)
        highscore[16]=gj_result_data_field_num("score",16)
        name[16] = gj_result_data_field_num("display_name",16)
        highscore[17]=gj_result_data_field_num("score",17)
        name[17] = gj_result_data_field_num("display_name",17)
        highscore[18]=gj_result_data_field_num("score",18)
        name[18] = gj_result_data_field_num("display_name",18)
        highscore[19]=gj_result_data_field_num("score",19)
        name[19] = gj_result_data_field_num("display_name",19)
        highscore[20]=gj_result_data_field_num("score",20)
        name[20] = gj_result_data_field_num("display_name",20)
        highscore[21]=gj_result_data_field_num("score",21)
        name[21] = gj_result_data_field_num("display_name",21)
        highscore[22]=gj_result_data_field_num("score",22)
        name[22] = gj_result_data_field_num("display_name",22)
        highscore[23]=gj_result_data_field_num("score",23)
        name[23] = gj_result_data_field_num("display_name",23)
        highscore[24]=gj_result_data_field_num("score",24)
        name[24] = gj_result_data_field_num("display_name",24)
        highscore[25]=gj_result_data_field_num("score",25)
        name[25] = gj_result_data_field_num("display_name",25)
        highscore[26]=gj_result_data_field_num("score",26)
        name[26] = gj_result_data_field_num("display_name",26)
        highscore[27]=gj_result_data_field_num("score",27)
        name[27] = gj_result_data_field_num("display_name",27)
        highscore[28]=gj_result_data_field_num("score",28)
        name[28] = gj_result_data_field_num("display_name",28)
        highscore[29]=gj_result_data_field_num("score",29)
        name[29] = gj_result_data_field_num("display_name",29)
        highscore[30]=gj_result_data_field_num("score",30)
        name[30] = gj_result_data_field_num("display_name",30)
        
        //If there were multiple highscores, the following code would return the 2nd highscore.
        //gj_result_data_field_num("score",1)
        //And you would be able to check how many highscores there are with:
        //gj_result_data_count()
    }
    else
    {
     highscore[1]="(error)"
     highscore[2]="(error)"
     highscore[3]="(error)"
     highscore[4]="(error)"
     highscore[5]="(error)"
    }
}
else if(resultid==httprequest[2]) //Just recieved the login count
{
    var status=gj_result_status();
    if(status==1)
    {
        //User logged in already. Check login count and add 1 to the logincount.
        gj_datastore_update_user("logincount","1","add")
        //And check how many time the user logged in before.
        loggedontimes=real(gj_result_data_field("data"))
    }
    else if(status==0)
    {
        if(gj_result_error()="No item with that key could be found.")
        {
            //Item does not exists, so user didn't logon earlier. Set login to 1 time.
            gj_datastore_set_user("logincount","1")
        }
    }
}
else if(resultid==httprequest[3]) //If we just recieved user information.
{
    if(gj_result_status())
    {
        currusertype=gj_result_data_field("type") //Loading user type.
    }
}
else if(resultid==httprequest[4]) //If user is awesome (last trophy is achieved)
{
    if(gj_result_status())
    {
        if(gj_result_data_field("achieved")!="false") //Check if trophy is achieved.
        {
            userisawesome=true
            awesomesince=gj_result_data_field("achieved") //This now returns since when the user has the trophy.
        }
    }
}
gj_result_clear()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//minutes = floor(global.best_time/room_speed)
//seconds = floor(((global.best_time % room_speed)/60)*99)


if draw_table = true
{
 draw_set_color(c_white)
 draw_set_font(font_missinglink8)
 draw_set_halign(fa_center)
 i = 0
 draw_text(view_xview+(view_wview/5),56,"Position:")
 draw_text(view_xview+(view_wview/2),56,"Name:")
 draw_text(view_xview+((view_wview*4)/5),56,"Time:")

  repeat (30)
  {
   draw_text(view_xview+(view_wview/5),78+(i*20),string(i+1)+":")
   
   //if name[i] = "0"
   //{
    //draw_text(view_xview+(view_wview/2),78+(i*20),"-")
   //}
   //else
   //{
    draw_text(view_xview+(view_wview/2),78+(i*20),name[i])
   //}
   score_to_draw = real(string_digits(highscore[i]))
   minutes = floor(score_to_draw/room_speed)
   seconds = floor(((score_to_draw % room_speed)/60)*99)
   if seconds &gt;= 10
{
   draw_text(view_xview+((view_wview*4)/5),78+(i*20),string(minutes)+"."+string(seconds)+" s")
   }
   else
   {
    draw_text(view_xview+((view_wview*4)/5),78+(i*20),string(minutes)+".0"+string(seconds)+" s")
   
   }
   i +=1
}


if global.best_time != 0
{
    score_to_draw = global.timer
   minutes = floor(score_to_draw/room_speed)
   seconds = floor(((score_to_draw % room_speed)/60)*99)
   if seconds &gt;= 10
{
 draw_text(room_width/2,750,"Your Time: "+string(minutes)+"."+string(seconds)+" s")
 }
 else
 {
    draw_text(room_width/2,750,"Your Time: "+string(minutes)+".0"+string(seconds)+" s")
 
 }
}
 //draw_text(room_width/2,510,"Press Enter Return to the Main Menu")
 draw_set_color(c_black)
 draw_set_font(-1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
