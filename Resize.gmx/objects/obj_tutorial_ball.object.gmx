<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>msk_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer = 0
global.timer = 0
start_counting = false
touch_pos = 0;

touch_previous = 0;
touched = false;
size = sprite_width;
add_size = 0;
draw_size = sprite_width;
direction = 90
alpha = 1
start = false
done = false
dead = false

line_alpha = 0
slider_alpha = 0

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle setup

    // Code created using Aerohawk Effects 4 by Wormintheworks

// VARIABLE SETUP. Put this in the create event before the PARTICLE SETUP.

_partabc_shape=pt_shape_pixel
_partabc_count=300
_partabc_sprite=0
_partabc_col1=65535
_partabc_col2=4235519
_partabc_col3=255
_partabc_alp1=1
_partabc_alp2=1
_partabc_alp3=1
_partabc_sizmn=1
_partabc_sizmx=1
_partabc_sizic=0
_partabc_sizwg=0
_partabc_xscale=1
_partabc_yscale=1
_partabc_orimn=0
_partabc_orimx=0
_partabc_oriic=0
_partabc_oriwg=0
_partabc_orirl=0
_partabc_dirmn=0
_partabc_dirmx=360
_partabc_diric=0
_partabc_dirwg=0
_partabc_spdmn=4
_partabc_spdmx=4
_partabc_spdic=0
_partabc_spdwg=0
_partabc_grvam=0
_partabc_grvdir=0
_partabc_lifemin=20
_partabc_lifemax=40
_partabc_abl=0
_emiabc_radius=size+add_size
_emiabc_shape=ps_shape_rectangle
_emiabc_distr=ps_distr_linear

// PARTICLE SETUP. Put this in the create event after the VARIABLE SETUP.

_sysabc=part_system_create()
part_system_depth(_sysabc,depth)
_partabc=part_type_create()
part_type_shape(_partabc,_partabc_shape)
if (_partabc_sprite=1) {part_type_sprite(_partabc,sPartSprite,0,0,0)}
part_type_color3(_partabc,_partabc_col1,_partabc_col2,_partabc_col3)
part_type_alpha3(_partabc,_partabc_alp1,_partabc_alp2,_partabc_alp3)
part_type_size(_partabc,_partabc_sizmn,_partabc_sizmx,_partabc_sizic,_partabc_sizwg)
part_type_scale(_partabc,_partabc_xscale,_partabc_yscale)
part_type_orientation(_partabc,_partabc_orimn,_partabc_orimx,_partabc_oriic,_partabc_oriwg,_partabc_orirl)
part_type_direction(_partabc,_partabc_dirmn,_partabc_dirmx,_partabc_diric,_partabc_dirwg)
part_type_speed(_partabc,_partabc_spdmn,_partabc_spdmx,_partabc_spdic,_partabc_spdwg)
part_type_gravity(_partabc,_partabc_grvam,_partabc_grvdir)
part_type_life(_partabc,_partabc_lifemin,_partabc_lifemax)
part_type_blend(_partabc,_partabc_abl)
_emiabc=part_emitter_create(_sysabc)

/* PARTICLE CREATION. default is stream, uncomment to burst. Place in the event
that should start your particle creation, Aerohawk Effects 4 uses the CREATE event. */

//part_emitter_stream(_sysabc,_emiabc,_partabc,_partabc_count)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create shadow
if dead = false &amp;&amp; trail = false
{
alarm[2] = 2
if done = false &amp;&amp; start = true
{
    instance_create(x+lengthdir_x(1,direction),y+lengthdir_y(1,direction),obj_ball_shadow)
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart when dead

part_system_destroy(_sysabc)
if done = false
{
    if room = room_survival
    {
        global.timer = timer
        global.next_room = room_leaderboard
        global.previous_room = room
        instance_create(0,0,obj_fade_out)
    }
    else
    {
        room_restart()
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//reset background speed

background_hspeed[0] = 0

background_vspeed[0] = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main mechanics

//Set path speed

if (start = false || done = true || dead = true)
{
    path_speed = 0
}
else
{
    path_speed = max(3.5 ,  (path_position+0.1)*global.level_speed + ( (64/(size + add_size)) /1.5))
}

//Fix direction
if direction &gt; 360
{
    direction = direction - 360
}
if direction &lt; 0
{
    direction = 360 + direction
}

//Set view angle

//view_angle = 90-direction;

view_angle=(view_angle+(sin(degtorad((90-direction)-view_angle))*(path_speed*3)));



//Rotate ball

image_angle=(image_angle+(sin(degtorad(direction-image_angle))*(path_speed*12)));


//Resize ball


// CS - towards centre
if global.control_scheme = 1 &amp;&amp; done = false
{

if device_mouse_check_button_pressed(0, mb_left)
{
    if os_type = os_android || os_type = os_ios 
    {
        touch_previous = point_distance(display_get_gui_width()/2,display_get_gui_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0));
    }
    else
    {
        touch_previous = point_distance(x,y,device_mouse_x(0),device_mouse_y(0));
    }
    add_size = 0;
}

if device_mouse_check_button_released(0, mb_left)
{
    size += add_size;
    if size &lt; 8 {size=8;}
    if size &gt; 120 {size=120;}
    add_size = 0;
    if os_type = os_android || os_type = os_ios 
    {
        touch_previous = point_distance(display_get_gui_width()/2,display_get_gui_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0));
    }
    else
    {
        touch_previous = point_distance(x,y,device_mouse_x(0),device_mouse_y(0));
    }
}

touched = device_mouse_check_button(0, mb_left);

if (touched)
{
    
    if os_type = os_android || os_type = os_ios
    {
        touch_pos = point_distance(display_get_gui_width()/2,display_get_gui_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0));
    }
    else
    {
        touch_pos = point_distance(x,y,device_mouse_x(0),device_mouse_y(0));  
    }
    
    add_size = (touch_pos - touch_previous) / global.sensitivity;
    
    if size+add_size &gt; 120
    {
        size = 120
        add_size = 0
        touch_previous = touch_pos
    }
    
    if size+add_size &lt; 8
    {
        size = 8
        add_size = 0
        touch_previous = touch_pos
    }
}



}



//CS - bttom to top
if global.control_scheme = 2 &amp;&amp; done = false
{


// one finger

if device_mouse_check_button_pressed(0, mb_left)
{
    if os_type = os_android || os_type = os_ios 
    {
        touch_previous = point_distance(display_get_gui_width()/2,0,display_get_gui_width()/2,device_mouse_raw_y(0));
    }
    else
    {
        touch_previous = point_distance(x,0,x,device_mouse_raw_y(0));  
    }
    add_size = 0;
}

if device_mouse_check_button_released(0, mb_left)
{
    size += add_size;
    if size &lt; 8 {size=8;}
    if size &gt; 120 {size=120;}
    add_size = 0;
    if os_type = os_android || os_type = os_ios 
    {
        touch_previous = point_distance(display_get_gui_width()/2,0,display_get_gui_width()/2,device_mouse_raw_y(0));
    }
    else
    {
        touch_previous = point_distance(x,0,x,device_mouse_raw_y(0));  
    }
}

touched = device_mouse_check_button(0, mb_left);

if (touched)
{
    
    if os_type = os_android || os_type = os_ios
    {
        touch_pos = point_distance(display_get_gui_width()/2,0,display_get_gui_width()/2,device_mouse_raw_y(0));
    }
    else
    {
        touch_pos = point_distance(x,0,x,device_mouse_raw_y(0));  
    }
    
    add_size = (touch_pos - touch_previous) / global.sensitivity;
    
    if size+add_size &gt; 120
    {
        size = 120
        add_size = 0
        touch_previous = touch_pos
    }
    
    if size+add_size &lt; 8
    {
        size = 8
        add_size = 0
        touch_previous = touch_pos
    }
}

}


//two fingers
if global.control_scheme = 3 &amp;&amp; done = false
{

if device_mouse_check_button_pressed(1, mb_left)
{
    if os_type = os_android || os_type = os_ios 
    {
        touch_previous = point_distance(device_mouse_raw_x(0),device_mouse_raw_y(0),device_mouse_raw_x(1),device_mouse_raw_y(1));
    }
    
    add_size = 0;
}

if device_mouse_check_button_released(1, mb_left)
{
    size += add_size;
    if size &lt; 8 {size=8;}
    if size &gt; 120 {size=120;}
    add_size = 0;
    if os_type = os_android || os_type = os_ios 
    {
        touch_previous = point_distance(device_mouse_raw_x(0),device_mouse_raw_y(0),device_mouse_raw_x(1),device_mouse_raw_y(1));
    }
    
}

touched = device_mouse_check_button(1, mb_left);

if (touched)
{
    
    if os_type = os_android || os_type = os_ios
    {
        touch_pos = point_distance(device_mouse_raw_x(0),device_mouse_raw_y(0),device_mouse_raw_x(1),device_mouse_raw_y(1));
    }
    
    
    add_size = (touch_pos - touch_previous) / global.sensitivity;
    
    if size+add_size &gt; 120
    {
        size = 120
        add_size = 0
        touch_previous = touch_pos
    }
    
    if size+add_size &lt; 8
    {
        size = 8
        add_size = 0
        touch_previous = touch_pos
    }
}



}






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_particles_clear(_partabc)
part_emitter_destroy_all(_sysabc)
part_system_destroy(_sysabc)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_text(16,16,"FPS: "+string(fps));
draw_text(16,32,"sensitivity: "+string(global.sensitivity));
draw_text(16,48,"control scheme: "+string(global.control_scheme));*/

//(16,112,"path_position: "+string(path_position));
//draw_text(16,128,"view_angle: "+string(view_angle));

//draw_text(16,32,"direction: "+string(direction));

//draw_text(16,64,"size: "+string(size));
//draw_text(16,80,"add_size: "+string(add_size));


//draw_text(display_get_gui_width()-500,16,string(timer))
//draw_text(0,80,string(global.survival_speed))


draw_set_alpha(1)
draw_set_color(c_white)
draw_set_halign(fa_left)



//draw line when touched (android)

//CS 1
if (os_type = os_android || os_type = os_ios) &amp;&amp; dead = false &amp;&amp; done = false &amp;&amp; global.control_scheme = 1
{
draw_set_alpha(0.25);
if (touched)
{
    dir = point_direction(display_get_width()/2, display_get_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0));
    //dir = (dir+(sin(degtorad(point_direction(display_get_width()/2, display_get_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0))-dir))*12));
    
    draw_arrow(device_mouse_raw_x(0) + lengthdir_x(8,dir),device_mouse_raw_y(0) + lengthdir_y(8,dir),
        device_mouse_raw_x(0) + lengthdir_x(168,dir),device_mouse_raw_y(0) + lengthdir_y(168,dir),41);
    
    draw_arrow(device_mouse_raw_x(0) - lengthdir_x(8,dir),device_mouse_raw_y(0) - lengthdir_y(8,dir),
        device_mouse_raw_x(0) - lengthdir_x(88,dir),device_mouse_raw_y(0) - lengthdir_y(88,dir),33);
}

draw_set_alpha(1);

}


//CS 2
if (os_type = os_android || os_type = os_ios) &amp;&amp; dead = false &amp;&amp; done = false &amp;&amp; global.control_scheme = 2 &amp;&amp; !(device_mouse_check_button(1,mb_left))
{
draw_set_alpha(0.25);
if (touched)
{
    //dir = point_direction(display_get_width()/2, display_get_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0));
    //dir = (dir+(sin(degtorad(point_direction(display_get_width()/2, display_get_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0))-dir))*12));
    
    /*draw_arrow(device_mouse_raw_x(0) ,device_mouse_raw_y(0) + 8,
        device_mouse_raw_x(0) ,device_mouse_raw_y(0) + 168 , 57);
    
    draw_arrow(device_mouse_raw_x(0) ,device_mouse_raw_y(0) - 8 ,
        device_mouse_raw_x(0) ,device_mouse_raw_y(0) - 88 , 33);
        */
        
    draw_sprite( spr_arrow_larger,0,device_mouse_raw_x(0) ,device_mouse_raw_y(0) + 80);
    
    draw_sprite(spr_arrow_smaller, 0,device_mouse_raw_x(0) ,device_mouse_raw_y(0) - 80)
        
        
}


draw_set_alpha(1);

}


//CS 3
if (os_type = os_android || os_type = os_ios) &amp;&amp; dead = false &amp;&amp; done = false &amp;&amp; global.control_scheme = 3
{
draw_set_alpha(0.25);
if (touched)
{
    //dir = point_direction(display_get_width()/2, display_get_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0));
    //dir = (dir+(sin(degtorad(point_direction(display_get_width()/2, display_get_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0))-dir))*12));
    
    /*draw_arrow(device_mouse_raw_x(0) ,device_mouse_raw_y(0) + 8,
        device_mouse_raw_x(0) ,device_mouse_raw_y(0) + 168 , 57);
    
    draw_arrow(device_mouse_raw_x(0) ,device_mouse_raw_y(0) - 8 ,
        device_mouse_raw_x(0) ,device_mouse_raw_y(0) - 88 , 33);
        */
        //dir = point_direction(device_mouse_raw_x(0),device_mouse_raw_y(0),device_mouse_raw_x(1),device_mouse_raw_y(1))
    draw_sprite_ext( spr_arrow_larger,0,device_mouse_raw_x(0),device_mouse_raw_y(0) ,2,2,(point_direction(device_mouse_raw_x(0),device_mouse_raw_y(0),device_mouse_raw_x(1),device_mouse_raw_y(1)))-90,c_white,0.25);
    draw_sprite_ext( spr_arrow_smaller,0,device_mouse_raw_x(0) ,device_mouse_raw_y(0) ,1,1,(point_direction(device_mouse_raw_x(0),device_mouse_raw_y(0),device_mouse_raw_x(1),device_mouse_raw_y(1)))+90+180,c_white,0.25);
    
    
    draw_sprite_ext( spr_arrow_larger,0,device_mouse_raw_x(1) ,device_mouse_raw_y(1),2,2,(point_direction(device_mouse_raw_x(1),device_mouse_raw_y(1),device_mouse_raw_x(0),device_mouse_raw_y(0)))-90,c_white,0.25);
    draw_sprite_ext( spr_arrow_smaller,0,device_mouse_raw_x(1) ,device_mouse_raw_y(1),1,1,(point_direction(device_mouse_raw_x(1),device_mouse_raw_y(1),device_mouse_raw_x(0),device_mouse_raw_y(0)))+90+180,c_white,0.25);
       
        
}


draw_set_alpha(1);

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1)
if dead = false
{

//Set size
//draw_size = max(8, min(size+add_size, 128));
draw_size=(draw_size+(sin(degtorad(max(8, min(size+add_size, 120))-draw_size))*12));

//NOTE: DRAW_SIZE = RADIUS!!!!

//draw trail first

//if trail = true
//{
    //draw_trail(16-((0.5) * ((size + add_size)/64)), draw_size*2, make_color_rgb(196,196,196), -1, true, 0.7)
    //draw_trail(16-((0.5) * ((size + add_size)/64)), draw_size*2, c_black, -1, true, 0.7)
    //draw_trail(16-((0.5) * ((size + add_size)/64)), draw_size*2, c_white, -1, true, 0.7)
//}



//draw outline second
draw_set_color(c_black)
draw_circle(x,y,draw_size+(2*round(draw_size/64))+1,false)
draw_set_color(c_white)

//Draw ball normally
//draw_circle_color(x,y,draw_size,c_white,c_white,false);
//draw_circle_color(x,y,draw_size,make_color_rgb(212,212,212),c_white,false);
//draw_circle_color(x,y,draw_size,make_color_rgb(160,160,160),c_white,false);
draw_circle_color(x,y,draw_size,c_white,make_color_rgb(160,160,160),false);




//draw outline old

/*draw_set_color(c_black)
for (i=0;i &lt; (2*round(draw_size/64))+2;i+=1)
{
    draw_circle(x,y,draw_size+i-1,true);
}
draw_set_color(-1)*/


//draw_sprite_ext(sprite_index, image_index, x,y,draw_size/64, draw_size/64,image_angle,image_blend,image_alpha);








}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
