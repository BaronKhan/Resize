<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>msk_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise main variables
timer = 0
global.timer = 0
start_counting = false
touch_pos = 0;

touch_previous = 0;
touched = false;
size = sprite_width;
add_size = 0;
draw_size = sprite_width;
direction = 90
alpha = 1
start = false
done = false
dead = false

line_alpha = 0
slider_alpha = 0
//Create fade
alarm[2] = 2

global.size_pitch = 1

instance_create(x,y,obj_fixline)


instance_create(x,y,obj_ready)

instance_create(0,0,obj_fade_in)

instance_create(0,0,obj_pause_button)

if !(audio_is_playing(mus_main)) &amp;&amp; global.play_music = true
{
    audio_play_music(mus_main,true)
}

trail = true

if os_browser != browser_not_a_browser
{
    trail = false
}
else
{
    trail = true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle setup

    // Code created using Aerohawk Effects 4 by Wormintheworks

// VARIABLE SETUP. Put this in the create event before the PARTICLE SETUP.

_partabc_shape=pt_shape_pixel
_partabc_count=300
_partabc_sprite=0
_partabc_col1=65535
_partabc_col2=4235519
_partabc_col3=255
_partabc_alp1=1
_partabc_alp2=1
_partabc_alp3=1
_partabc_sizmn=1
_partabc_sizmx=1
_partabc_sizic=0
_partabc_sizwg=0
_partabc_xscale=1
_partabc_yscale=1
_partabc_orimn=0
_partabc_orimx=0
_partabc_oriic=0
_partabc_oriwg=0
_partabc_orirl=0
_partabc_dirmn=0
_partabc_dirmx=360
_partabc_diric=0
_partabc_dirwg=0
_partabc_spdmn=4
_partabc_spdmx=4
_partabc_spdic=0
_partabc_spdwg=0
_partabc_grvam=0
_partabc_grvdir=0
_partabc_lifemin=20
_partabc_lifemax=40
_partabc_abl=0
_emiabc_radius=size+add_size
_emiabc_shape=ps_shape_rectangle
_emiabc_distr=ps_distr_linear

// PARTICLE SETUP. Put this in the create event after the VARIABLE SETUP.

_sysabc=part_system_create()
part_system_depth(_sysabc,depth)
_partabc=part_type_create()
part_type_shape(_partabc,_partabc_shape)
if (_partabc_sprite=1) {part_type_sprite(_partabc,sPartSprite,0,0,0)}
part_type_color3(_partabc,_partabc_col1,_partabc_col2,_partabc_col3)
part_type_alpha3(_partabc,_partabc_alp1,_partabc_alp2,_partabc_alp3)
part_type_size(_partabc,_partabc_sizmn,_partabc_sizmx,_partabc_sizic,_partabc_sizwg)
part_type_scale(_partabc,_partabc_xscale,_partabc_yscale)
part_type_orientation(_partabc,_partabc_orimn,_partabc_orimx,_partabc_oriic,_partabc_oriwg,_partabc_orirl)
part_type_direction(_partabc,_partabc_dirmn,_partabc_dirmx,_partabc_diric,_partabc_dirwg)
part_type_speed(_partabc,_partabc_spdmn,_partabc_spdmx,_partabc_spdic,_partabc_spdwg)
part_type_gravity(_partabc,_partabc_grvam,_partabc_grvdir)
part_type_life(_partabc,_partabc_lifemin,_partabc_lifemax)
part_type_blend(_partabc,_partabc_abl)
_emiabc=part_emitter_create(_sysabc)

/* PARTICLE CREATION. default is stream, uncomment to burst. Place in the event
that should start your particle creation, Aerohawk Effects 4 uses the CREATE event. */

//part_emitter_stream(_sysabc,_emiabc,_partabc,_partabc_count)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set path


if (room = room_level_1)
{
    path_start(path_lv1,2,0,false);
}

if (room = room_level_2)
{
    path_start(path_lv2,2,0,false);
}

if (room = room_level_3)
{
    path_start(path_lv3,2,0,false);
}

if (room = room_level_4)
{
    path_start(path_lv4,2,0,false);
}

if (room = room_level_5)
{
    path_start(path_lv5,2,0,false);
}

if (room = room_level_6)
{
    path_start(path_lv6,2,0,false);
}

if (room = room_level_7)
{
    path_start(path_lv7,2,0,false);
}

if (room = room_level_8)
{
    path_start(path_lv8,2,0,false);
}

if (room = room_level_9)
{
    path_start(path_lv9,2,0,false);
}

if (room = room_level_10)
{
    path_start(path_lv10,2,0,false);
}

if (room = room_level_11)
{
    path_start(path_lv11,2,0,false);
}

if (room = room_level_12)
{
    path_start(path_lv12,2,0,false);
}

if (room = room_level_13)
{
    path_start(path_lv13,2,0,false);
}

if (room = room_level_14)
{
    path_start(path_lv14,2,0,false);
}

if (room = room_level_15)
{
    path_start(path_lv15,2,0,false);
}

if (room = room_level_16)
{
    path_start(path_lv16,2,0,false);
}

if (room = room_level_17)
{
    path_start(path_lv17,2,0,false);
}

if (room = room_level_18)
{
    path_start(path_lv18,2,0,false);
}

if (room = room_level_19)
{
    path_start(path_lv19,2,0,false);
}

if (room = room_level_20)
{
    path_start(path_lv20,2,0,false);
}

if (room = room_level_21)
{
    path_start(path_lv21,2,0,false);
}

if (room = room_level_22)
{
    path_start(path_lv22,2,0,false);
}

if (room = room_level_23)
{
    path_start(path_lv23,2,0,false);
}

if (room = room_level_24)
{
    path_start(path_lv24,2,0,false);
}

if (room = room_level_25)
{
    path_start(path_lv25,2,0,false);
}

if (room = room_level_26)
{
    path_start(path_lv26,2,0,false);
}

/*if (room = room_survival)
{
    path_start(path_survival,2,2,false);
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset view angle

view_angle = 90-direction


if room == room_level_7
{
    view_angle = 45
}

if room == room_level_10
{
    direction = 300
    view_angle = 150
}


if room == room_level_14
{
    direction = 180
    view_angle = 270
}

if room == room_level_15 || room == room_level_26
{
    direction = 0
    view_angle = 90
}

if room == room_level_20
{
    direction = 0
    view_angle = 90
}

if room == room_level_21
{
    direction = 270
    view_angle = 180
}


if room == room_level_24
{
    direction = 77.6
    view_angle = 12.3
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set room variables

switch(room)
{
    case room_level_1:
        global.level = 1
        break;
    case room_level_2:
        global.level = 2
        break;
    case room_level_3:
        global.level = 3
        break;
    case room_level_4:
        global.level = 4
        break;
    case room_level_5:
        global.level = 5
        break;
    case room_level_6:
        global.level = 6
        break;
    case room_level_7:
        global.level = 7
        break;
    case room_level_8:
        global.level = 8
        break;
    case room_level_9:
        global.level = 9
        break;
    case room_level_10:
        global.level = 10
        break;
    case room_level_11:
        global.level = 11
        break;
    case room_level_12:
        global.level = 12
        break;
    case room_level_13:
        global.level = 13
        break;
    case room_level_14:
        global.level = 14
        break;
    case room_level_15:
        global.level = 15
        break;
    case room_level_16:
        global.level = 16
        break;
    case room_level_17:
        global.level = 17
        break;
    case room_level_18:
        global.level = 18
        break;
    case room_level_19:
        global.level = 19
        break;
    case room_level_20:
        global.level = 20
        break;
    case room_level_21:
        global.level = 21
        break;
    case room_level_22:
        global.level = 22
        break;
    case room_level_23:
        global.level = 23
        break;
    case room_level_24:
        global.level = 24
        break;
    case room_level_25:
        global.level = 25
        break;
    case room_level_26:
        global.level = 26
        break;
    case room_boss:
        global.level = 27
        break;
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Ad
if global.show_ads = true
{
ads_move((global.width/2)-(ads_get_display_width(0)/2), global.height-ads_get_display_height(0), 0)

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Background 2's speed

temp_bg2_hsp = background_hspeed[1]
temp_bg2_vsp = background_vspeed[1]

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove 2nd background in iOS

if os_type = os_ios
{
    background_visible[1] = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create shadow
if dead = false &amp;&amp; trail = false
{
alarm[2] = 2
if done = false &amp;&amp; start = true
{
    instance_create(x+lengthdir_x(1,direction),y+lengthdir_y(1,direction),obj_ball_shadow)
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart when dead

part_system_destroy(_sysabc)
if done = false
{
    if room = room_survival
    {
        global.timer = timer
        global.next_room = room_leaderboard
        global.previous_room = room
        instance_create(0,0,obj_fade_out)
    }
    else
    {
        room_restart()
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End of level
//room_restart()

if room = room_last
{
    game_restart()
}
else
{
    room_goto_next()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//reset background speed

background_hspeed[0] = 0

background_vspeed[0] = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main mechanics

//Set path speed

if (start = false || done = true || dead = true)
{
    path_speed = 0
}
else
{
    path_speed = max(3.5 ,  (path_position+0.1)*global.level_speed + ( (64/(size + add_size)) /1.5))
}

//Fix direction
if direction &gt; 360
{
    direction = direction - 360
}
if direction &lt; 0
{
    direction = 360 + direction
}

//Set view angle

//view_angle = 90-direction;

view_angle=(view_angle+(sin(degtorad((90-direction)-view_angle))*(path_speed*3)));



//Rotate ball

image_angle=(image_angle+(sin(degtorad(direction-image_angle))*(path_speed*12)));


//Resize ball


// CS - towards centre
if global.control_scheme = 1 &amp;&amp; done = false
{

if device_mouse_check_button_pressed(0, mb_left)
{
    if os_type = os_android || os_type = os_ios 
    {
        touch_previous = point_distance(display_get_gui_width()/2,display_get_gui_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0));
    }
    else
    {
        touch_previous = point_distance(x,y,device_mouse_x(0),device_mouse_y(0));
    }
    add_size = 0;
}

if device_mouse_check_button_released(0, mb_left)
{
    size += add_size;
    if size &lt; 8 {size=8;}
    if size &gt; 128 {size=128;}
    add_size = 0;
    if os_type = os_android || os_type = os_ios 
    {
        touch_previous = point_distance(display_get_gui_width()/2,display_get_gui_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0));
    }
    else
    {
        touch_previous = point_distance(x,y,device_mouse_x(0),device_mouse_y(0));
    }
}

touched = device_mouse_check_button(0, mb_left);

if (touched)
{
    
    if os_type = os_android || os_type = os_ios
    {
        touch_pos = point_distance(display_get_gui_width()/2,display_get_gui_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0));
    }
    else
    {
        touch_pos = point_distance(x,y,device_mouse_x(0),device_mouse_y(0));  
    }
    
    add_size = (touch_pos - touch_previous) / global.sensitivity;
    
    if size+add_size &gt; 128
    {
        size = 128
        add_size = 0
        touch_previous = touch_pos
    }
    
    if size+add_size &lt; 8
    {
        size = 8
        add_size = 0
        touch_previous = touch_pos
    }
}



}



//CS - bttom to top
if global.control_scheme = 2 &amp;&amp; done = false
{


// one finger

if device_mouse_check_button_pressed(0, mb_left)
{
    if os_type = os_android || os_type = os_ios 
    {
        touch_previous = point_distance(display_get_gui_width()/2,0,display_get_gui_width()/2,device_mouse_raw_y(0));
    }
    else
    {
        touch_previous = point_distance(x,0,x,device_mouse_raw_y(0));  
    }
    add_size = 0;
}

if device_mouse_check_button_released(0, mb_left)
{
    size += add_size;
    if size &lt; 8 {size=8;}
    if size &gt; 128 {size=128;}
    add_size = 0;
    if os_type = os_android || os_type = os_ios 
    {
        touch_previous = point_distance(display_get_gui_width()/2,0,display_get_gui_width()/2,device_mouse_raw_y(0));
    }
    else
    {
        touch_previous = point_distance(x,0,x,device_mouse_raw_y(0));  
    }
}

touched = device_mouse_check_button(0, mb_left);

if (touched)
{
    
    if os_type = os_android || os_type = os_ios
    {
        touch_pos = point_distance(display_get_gui_width()/2,0,display_get_gui_width()/2,device_mouse_raw_y(0));
    }
    else
    {
        touch_pos = point_distance(x,0,x,device_mouse_raw_y(0));  
    }
    
    add_size = (touch_pos - touch_previous) / global.sensitivity;
    
    if size+add_size &gt; 128
    {
        size = 128
        add_size = 0
        touch_previous = touch_pos
    }
    
    if size+add_size &lt; 8
    {
        size = 8
        add_size = 0
        touch_previous = touch_pos
    }
}

}


//two fingers
if global.control_scheme = 3 &amp;&amp; done = false
{

if device_mouse_check_button_pressed(1, mb_left)
{
    if os_type = os_android || os_type = os_ios 
    {
        touch_previous = point_distance(device_mouse_raw_x(0),device_mouse_raw_y(0),device_mouse_raw_x(1),device_mouse_raw_y(1));
    }
    
    add_size = 0;
}

if device_mouse_check_button_released(1, mb_left)
{
    size += add_size;
    if size &lt; 8 {size=8;}
    if size &gt; 128 {size=128;}
    add_size = 0;
    if os_type = os_android || os_type = os_ios 
    {
        touch_previous = point_distance(device_mouse_raw_x(0),device_mouse_raw_y(0),device_mouse_raw_x(1),device_mouse_raw_y(1));
    }
    
}

touched = device_mouse_check_button(1, mb_left);

if (touched)
{
    
    if os_type = os_android || os_type = os_ios
    {
        touch_pos = point_distance(device_mouse_raw_x(0),device_mouse_raw_y(0),device_mouse_raw_x(1),device_mouse_raw_y(1));
    }
    
    
    add_size = (touch_pos - touch_previous) / global.sensitivity;
    
    if size+add_size &gt; 128
    {
        size = 128
        add_size = 0
        touch_previous = touch_pos
    }
    
    if size+add_size &lt; 8
    {
        size = 8
        add_size = 0
        touch_previous = touch_pos
    }
}



}






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End level


if path_position &gt;= 1 &amp;&amp; done = false &amp;&amp; room != room_survival &amp;&amp; room != room_boss
{
    done = true
    instance_create(0,0,obj_level_complete)  
    start_counting = false 
    audio_play_sound(snd_complete_level,10,false)
}


if room = room_boss &amp;&amp; done = false &amp;&amp; instance_number(obj_boss) &lt; 1
{
    done = true
    instance_create(0,0,obj_level_complete)  
    start_counting = false 
    audio_play_sound(snd_complete_level,10,false)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision mechanics

//NOTE: SIZE+ADD_SIZE = RADIUS OF BALL!!!!
//NOTEE : CHANGED SIZE+ADD_SIZE TO DRAW_SIZE!!!!

//spike
if collision_circle(x,y,draw_size,obj_spike,true,true) &amp;&amp; dead = false
{
    alarm[1] = 90
    path_end()
    _emiabc_radius=draw_size
    part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
    part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
    audio_play_sound(snd_explode,7,false)
 
    dead = true
}

//rocket
if collision_circle(x,y,draw_size,obj_rocket,true,true) &amp;&amp; dead = false
{
    alarm[1] = 90
    path_end()
    _emiabc_radius=draw_size
    part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
    part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
    audio_play_sound(snd_explode,7,false)
 
    dead = true
    with instance_nearest(x,y,obj_rocket)
    {
        dead = true
    }
}

//stompers
if (collision_circle(x,y,draw_size,obj_stomper1,true,true) || collision_circle(x,y,draw_size,obj_stomper2,true,true)) &amp;&amp; dead = false
{
    alarm[1] = 90
    path_end()
    _emiabc_radius=draw_size
    part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
    part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
    audio_play_sound(snd_explode,7,false)
 
    dead = true
}

//wall
if (collision_circle(x,y,draw_size,obj_wall,true,true)) &amp;&amp; dead = false
{
    alarm[1] = 90
    path_end()
    _emiabc_radius=draw_size
    part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
    part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
    audio_play_sound(snd_explode,7,false)
 
    dead = true
}

//comet
if collision_circle(x,y,draw_size,obj_comet,true,true) &amp;&amp; dead = false /* &amp;&amp; draw_size &gt; 8 */
{
    alarm[1] = 90
    path_end()
    _emiabc_radius=draw_size
    part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
    part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
    audio_play_sound(snd_explode,7,false)
 
    dead = true
}

//breakable wall
if collision_circle(x,y,draw_size,obj_wall_breakable,true,true) &amp;&amp; dead = false &amp;&amp; instance_nearest(x,y,obj_wall_breakable).done = false
{
    wall = instance_nearest(x,y,obj_wall_breakable)
    if draw_size &lt; wall.radius
    {
        alarm[1] = 90
        path_end()
        _emiabc_radius=draw_size
        part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
        part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
        audio_play_sound(snd_hit_rock,7,false)
        dead = true
    }
    else
    {
        if wall.broken = false
        {
            wall.broken = true
        }
    }
}

//enemy 1
if collision_circle(x,y,draw_size,obj_enemy,true,true) &amp;&amp; dead = false &amp;&amp; instance_nearest(x,y,obj_enemy).dead = false
{
    enemy1 = instance_nearest(x,y,obj_enemy)
    if draw_size &lt; enemy1.radius
    {
        alarm[1] = 90
        path_end()
        _emiabc_radius=draw_size
        part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
        part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
        audio_play_sound(snd_hit_rock,7,false)
        dead = true
    }
    else
    {
        if enemy1.dead = false
        {
            enemy1.dead = true
        }
    }
}

//bullet
if collision_circle(x,y,draw_size,obj_bullet,true,true) &amp;&amp; dead = false
{
    alarm[1] = 90
    path_end()
    _emiabc_radius=draw_size
    part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
    part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
    audio_play_sound(snd_explode,7,false)
 
    dead = true
}



//size inc
if dead = false &amp;&amp; point_distance(x,y,instance_nearest(x,y,obj_size_increase).x,instance_nearest(x,y,obj_size_increase).y) &lt; 16
{   
    if draw_size &lt;= instance_nearest(x,y,obj_size_increase).radius
    {
        alarm[1] = 90
        path_end()
        _emiabc_radius=draw_size
        part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
        part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
        audio_play_sound(snd_explode,7,false)
 
        dead = true
    }
    else
    {
        a = instance_nearest(x,y,obj_size_increase)
        a.status = 1
    }
}
else
{
    a = instance_nearest(x,y,obj_size_increase)
    if a.status = 1
    {
        a.status = 2
        if !(audio_is_playing(snd_pass_changer))
        {
            audio_sound_pitch(snd_pass_changer,global.size_pitch)
            audio_play_sound(snd_pass_changer,4,false)
            if room != room_survival
            {
                global.size_pitch += 0.03
            }
        }
        
    }
}


//size dec
if dead = false &amp;&amp; point_distance(x,y,instance_nearest(x,y,obj_size_decrease).x,instance_nearest(x,y,obj_size_decrease).y) &lt; 16
{
    if draw_size &gt;= instance_nearest(x,y,obj_size_decrease).radius
    {
        alarm[1] = 90
        path_end()
        _emiabc_radius=draw_size
        part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
        part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
        audio_play_sound(snd_explode,7,false)
        dead = true
    }
    else
    {
        a = instance_nearest(x,y,obj_size_decrease)
        a.status = 1
    }
}
else
{
    a = instance_nearest(x,y,obj_size_decrease)
    if a.status = 1
    {
        a.status = 2
        if !(audio_is_playing(snd_pass_changer))
        {
            audio_sound_pitch(snd_pass_changer,global.size_pitch)
            audio_play_sound(snd_pass_changer,4,false)
            if room != room_survival
            {
                global.size_pitch += 0.03
            }
        }
        
    }
}

/*Force change collision in obj_force_change Step event*/


//boss
if instance_number(obj_boss) &gt; 0
{
if collision_circle(x,y,draw_size,obj_boss,true,true) &amp;&amp; dead = false &amp;&amp; obj_boss.dead = false
{
    alarm[1] = 90
    path_end()
    _emiabc_radius=draw_size
    part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
    part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
    audio_play_sound(snd_explode,7,false)
 
    dead = true
    
}
}
//boss_bullet
if instance_number(obj_boss_bullet) &gt; 0
{
if collision_circle(x,y,draw_size,obj_boss_bullet,true,true) &amp;&amp; dead = false &amp;&amp; instance_nearest(x,y,obj_boss_bullet).rebound = false
{
    enemy1 = instance_nearest(x,y,obj_boss_bullet)
    if draw_size &lt;= enemy1.radius
    {
        alarm[1] = 90
        path_end()
        _emiabc_radius=draw_size
        part_emitter_region(_sysabc,_emiabc,x-_emiabc_radius,x+_emiabc_radius,y-_emiabc_radius,y+_emiabc_radius,_emiabc_shape,_emiabc_distr)
        part_emitter_burst(_sysabc,_emiabc,_partabc,_partabc_count)
        audio_play_sound(snd_explode,7,false)
        dead = true
    }
    else
    {
        if enemy1.rebound = false
        {
            enemy1.rebound = true
            enemy1.vspeed = -(enemy1.vspeed*2)
            audio_play_sound(snd_hit_rock,7,false)
            
        }
    }
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///timer

if start_counting = true &amp;&amp; dead = false
{
    timer+=1
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///misc

if global.previous_room != room &amp;&amp; done = false
{
    global.previous_room = room
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Background

if room != room_survival &amp;&amp; room != room_boss
{

if view_xview &gt; 0 &amp;&amp; view_xview+view_wview &lt; room_width
{
    background_hspeed[0] = lengthdir_x(path_speed,direction)/2
}

if view_yview &gt; 0 &amp;&amp; view_yview+view_hview &lt; room_height
{
    background_vspeed[0] = lengthdir_y(path_speed,direction)/2
}


//Set bg 2's speed

if view_xview &gt; 0 &amp;&amp; view_xview+view_wview &lt; room_width
{
    background_hspeed[1] = lengthdir_x(path_speed,direction)/2 + temp_bg2_hsp
}
else
{
    background_hspeed[1] = temp_bg2_hsp
}

if view_yview &gt; 0 &amp;&amp; view_yview+view_hview &lt; room_height
{
    background_vspeed[1] = lengthdir_y(path_speed,direction)/2 + temp_bg2_vsp
}
else
{
   background_vspeed[1] = temp_bg2_vsp  
}



}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wrap in survival / boss

if (room = room_survival || room = room_boss)
{
    if room = room_survival
    {
        vspeed = -(path_speed*global.survival_speed)
    }
    if room = room_boss
    {
       vspeed = -(path_speed*global.boss_speed)
    }
    move_wrap(true,true,1000)
    
    if y &lt; 480
    {
        temp_y = y
        y = room_height - 480
        if room = room_boss
        {
            temp_boss_y = y-view_yview
        }
        view_yview = room_height-960
        if room = room_boss
        {
            obj_boss.y = view_yview+temp_boss_y
        }
        if instance_number(obj_ball_shadow) &gt; 0
        {
            obj_ball_shadow.y = y+(obj_ball_shadow.y-temp_y)
        }
        if trail = true
        {
            Min = 16-((0.5) * ((size + add_size)/64))
            for (var i = Min; i &gt; 0; i--)
            { 
                ArrayTraily[i] = y+(ArrayTraily[i]-temp_y);
            }
        }
        with (all)
        {
            if object_index != obj_ball &amp;&amp; object_index != obj_ball_shadow &amp;&amp; object_index != obj_pause_button
             &amp;&amp; object_index != obj_fixline &amp;&amp; object_index != obj_survival_CTRL &amp;&amp; object_index != obj_boss_CTRL
              &amp;&amp; object_index != obj_boss  &amp;&amp; object_index != obj_fixres_android  &amp;&amp; object_index != obj_go
               &amp;&amp; object_index != obj_ready
             {
                instance_destroy()
             }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_particles_clear(_partabc)
part_emitter_destroy_all(_sysabc)
part_system_destroy(_sysabc)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_text(16,16,"FPS: "+string(fps));
draw_text(16,32,"sensitivity: "+string(global.sensitivity));
draw_text(16,48,"control scheme: "+string(global.control_scheme));*/

//draw_text(16,112,"path_position: "+string(path_position));
//draw_text(16,128,"view_angle: "+string(view_angle));

//draw_text(16,32,"direction: "+string(direction));

//draw_text(16,64,"size: "+string(size));
//draw_text(16,80,"add_size: "+string(add_size));


//draw_text(display_get_gui_width()-500,16,string(y))
//draw_text(0,80,string(global.survival_speed))
draw_set_halign(fa_left)
draw_set_color(c_white)
draw_set_alpha(0.5)

minutes = floor(timer/room_speed)
seconds = floor(((timer % room_speed)/60)*99)

draw_set_font(font_missinglink16)

if room != room_boss
{

if seconds &gt;= 10
{
    draw_text_transformed(display_get_gui_width()/60/*+(display_get_gui_width()/45)*/ ,(display_get_gui_height()/50)/*+(display_get_gui_width()/45)*/,string(minutes)+"."+string(seconds),1,1,0)
}
else
{
    draw_text_transformed(display_get_gui_width()/60/*+(display_get_gui_width()/45)*/ ,(display_get_gui_height()/50)/*+(display_get_gui_width()/45)*/,string(minutes)+".0"+string(seconds),1,1,0)
}

}
else
{
    if instance_number(obj_boss) &gt; 0
    {
        draw_text_transformed(display_get_gui_width()/60/*+(display_get_gui_width()/45)*/ ,(display_get_gui_height()/50)/*+(display_get_gui_width()/45)*/,"HP: "+string(obj_boss.hp*20)+"%",1,1,0)
    }
}
draw_set_font(-1)

draw_set_alpha(1)
draw_set_color(c_white)
draw_set_halign(fa_left)



//draw line when touched (android)

//CS 1
if (os_type = os_android || os_type = os_ios) &amp;&amp; dead = false &amp;&amp; done = false &amp;&amp; global.control_scheme = 1 &amp;&amp; (room=room_level_1 || room=room_level_2 || room=room_level_3 )
{
draw_set_alpha(0.25);
if (touched)
{
    dir = point_direction(display_get_width()/2, display_get_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0));
    //dir = (dir+(sin(degtorad(point_direction(display_get_width()/2, display_get_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0))-dir))*12));
    
    draw_arrow(device_mouse_raw_x(0) + lengthdir_x(8,dir),device_mouse_raw_y(0) + lengthdir_y(8,dir),
        device_mouse_raw_x(0) + lengthdir_x(168,dir),device_mouse_raw_y(0) + lengthdir_y(168,dir),41);
    
    draw_arrow(device_mouse_raw_x(0) - lengthdir_x(8,dir),device_mouse_raw_y(0) - lengthdir_y(8,dir),
        device_mouse_raw_x(0) - lengthdir_x(88,dir),device_mouse_raw_y(0) - lengthdir_y(88,dir),33);
}

draw_set_alpha(1);

}


//CS 2
if (os_type = os_android || os_type = os_ios) &amp;&amp; dead = false &amp;&amp; done = false &amp;&amp; global.control_scheme = 2 &amp;&amp; !(device_mouse_check_button(1,mb_left)) &amp;&amp; (room=room_level_1 || room=room_level_2 || room=room_level_3 )
{
draw_set_alpha(0.25);
if (touched)
{
    //dir = point_direction(display_get_width()/2, display_get_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0));
    //dir = (dir+(sin(degtorad(point_direction(display_get_width()/2, display_get_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0))-dir))*12));
    
    /*draw_arrow(device_mouse_raw_x(0) ,device_mouse_raw_y(0) + 8,
        device_mouse_raw_x(0) ,device_mouse_raw_y(0) + 168 , 57);
    
    draw_arrow(device_mouse_raw_x(0) ,device_mouse_raw_y(0) - 8 ,
        device_mouse_raw_x(0) ,device_mouse_raw_y(0) - 88 , 33);
        */
        
    draw_sprite( spr_arrow_larger,0,device_mouse_raw_x(0) ,device_mouse_raw_y(0) + 80);
    
    draw_sprite(spr_arrow_smaller, 0,device_mouse_raw_x(0) ,device_mouse_raw_y(0) - 80)
        
        
}


draw_set_alpha(1);

}


//CS 3
if (os_type = os_android || os_type = os_ios) &amp;&amp; dead = false &amp;&amp; done = false &amp;&amp; global.control_scheme = 3 &amp;&amp; (room=room_level_1 || room=room_level_2 || room=room_level_3 )
{
draw_set_alpha(0.25);
if (touched)
{
    //dir = point_direction(display_get_width()/2, display_get_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0));
    //dir = (dir+(sin(degtorad(point_direction(display_get_width()/2, display_get_height()/2,device_mouse_raw_x(0),device_mouse_raw_y(0))-dir))*12));
    
    /*draw_arrow(device_mouse_raw_x(0) ,device_mouse_raw_y(0) + 8,
        device_mouse_raw_x(0) ,device_mouse_raw_y(0) + 168 , 57);
    
    draw_arrow(device_mouse_raw_x(0) ,device_mouse_raw_y(0) - 8 ,
        device_mouse_raw_x(0) ,device_mouse_raw_y(0) - 88 , 33);
        */
        //dir = point_direction(device_mouse_raw_x(0),device_mouse_raw_y(0),device_mouse_raw_x(1),device_mouse_raw_y(1))
    draw_sprite_ext( spr_arrow_larger,0,device_mouse_raw_x(0),device_mouse_raw_y(0) ,2,2,(point_direction(device_mouse_raw_x(0),device_mouse_raw_y(0),device_mouse_raw_x(1),device_mouse_raw_y(1)))-90,c_white,0.25);
    draw_sprite_ext( spr_arrow_smaller,0,device_mouse_raw_x(0) ,device_mouse_raw_y(0) ,1,1,(point_direction(device_mouse_raw_x(0),device_mouse_raw_y(0),device_mouse_raw_x(1),device_mouse_raw_y(1)))+90+180,c_white,0.25);
    
    
    draw_sprite_ext( spr_arrow_larger,0,device_mouse_raw_x(1) ,device_mouse_raw_y(1),2,2,(point_direction(device_mouse_raw_x(1),device_mouse_raw_y(1),device_mouse_raw_x(0),device_mouse_raw_y(0)))-90,c_white,0.25);
    draw_sprite_ext( spr_arrow_smaller,0,device_mouse_raw_x(1) ,device_mouse_raw_y(1),1,1,(point_direction(device_mouse_raw_x(1),device_mouse_raw_y(1),device_mouse_raw_x(0),device_mouse_raw_y(0)))+90+180,c_white,0.25);
       
        
}


draw_set_alpha(1);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw slider

width = display_get_gui_width()
height = display_get_gui_height()

draw_set_color(c_white)

if (slider_alpha &gt; 0) &amp;&amp; global.control_scheme != 3
{
    if (os_type = os_android || os_type = os_ios || os_type = os_windows)
    {
        //540 --&gt; 608
        //left
        if device_mouse_raw_x(0) &gt; width/2
        {
            draw_set_alpha(min(0.2,slider_alpha))
            for(i=0; i &lt; (round(height/2.11)); i+=1)
            {
                draw_line(0,(height/5)+i,power(i/(width/3.79),4)+3,(height/5)+i)
            }
            //draw zero line
            draw_line(0,(height/5)-1, width/7.2 , (height/5)-1)
            
            draw_set_color(c_black)
            draw_set_alpha(slider_alpha*4)
            draw_line_width(0,(height/5)+(((draw_size-8)/120)*round((height/2.11))), width/5 , (height/5)+(((draw_size-8)/120)*(round(height/2.11))),4)
            draw_set_color(c_white)
            global.left = true
        }  
            
        //right
        if device_mouse_raw_x(0) &lt; width/2
        {
            draw_set_alpha(min(0.2,slider_alpha))
            for(i=0; i &lt; (round(height/2.11)); i+=1)
            {
                draw_line(width,(height/5)+i,width-(power(i/(width/3.79),4)+3),(height/5)+i)
            }
            //draw zero line           
            draw_line(width,(height/5)-1, width-(width/7.2) , (height/5)-1)
            
            draw_set_color(c_black)
            draw_set_alpha(slider_alpha*4)
            draw_line_width(width,(height/5)+(((draw_size-8)/120)*(round(height/2.11))), width-(width/5) , (height/5)+(((draw_size-8)/120)*(round(height/2.11))),4)
            draw_set_color(c_white)
            global.left = false
            
        }
    }
}

//draw level

if room != room_survival
{
    draw_set_alpha(1)
    draw_set_font(font_missinglink8)
    if global.left = true
    {
        draw_set_halign(fa_left)
        //draw_text(width/45,height-(height/64)-(height/80),"Level "+string(global.level))
    }
    else
    {
        draw_set_halign(fa_right)
        //draw_text(width-(width/45),height-(height/64)-(height/80),"Level "+string(global.level))
    }
}
            


if (touched &amp;&amp; done = false &amp;&amp; start = true)
{
    if slider_alpha &lt; 0.4
    {
            slider_alpha += 0.01
    }
}
else
{
    if slider_alpha &gt; -0.2
    {
        slider_alpha -=0.01
    }
}

draw_set_halign(-1)
draw_set_font(-1)
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw path
if start = true
{
if line_alpha &lt; 1 {line_alpha += 0.1} else {line_alpha = 1}

draw_set_alpha(line_alpha/2)

draw_set_color(c_white);

if room = room_level_1
{
    draw_path(path_lv1,xstart,ystart,false);
}

if room = room_level_2
{
    draw_path(path_lv2,xstart,ystart,false);
}

if room = room_level_3
{
    draw_path(path_lv3,xstart,ystart,false);
}

if room = room_level_4
{
    draw_path(path_lv4,xstart,ystart,false);
}

if room = room_level_5
{
    draw_path(path_lv5,xstart,ystart,false);
}

if room = room_level_6
{
    draw_path(path_lv6,xstart,ystart,false);
}

if room = room_level_7
{
    draw_path(path_lv7,xstart,ystart,false);
}

if room = room_level_8
{
    draw_path(path_lv8,xstart,ystart,false);
}

if room = room_level_9
{
    draw_path(path_lv9,xstart,ystart,false);
}

if room = room_level_10
{
    draw_path(path_lv10,xstart,ystart,false);
}

if room = room_level_11
{
    draw_path(path_lv11,xstart,ystart,false);
}

if room = room_level_12
{
    draw_path(path_lv12,xstart,ystart,false);
}

if room = room_level_13
{
    draw_path(path_lv13,xstart,ystart,false);
}

if room = room_level_14
{
    draw_path(path_lv14,xstart,ystart,false);
}

if room = room_level_15
{
    draw_path(path_lv15,xstart,ystart,false);
}

if room = room_level_16
{
    draw_path(path_lv16,xstart,ystart,false);
}

if room = room_level_17
{
    draw_path(path_lv17,xstart,ystart,false);
}

if room = room_level_18
{
    draw_path(path_lv18,xstart,ystart,false);
}

if room = room_level_19
{
    draw_path(path_lv19,xstart,ystart,false);
}

if room = room_level_20
{
    draw_path(path_lv20,xstart,ystart,false);
}

if room = room_level_21
{
    draw_path(path_lv21,xstart,ystart,false);
}

if room = room_level_22
{
    draw_path(path_lv22,xstart,ystart,false);
}

if room = room_level_23
{
    draw_path(path_lv23,xstart,ystart,false);
}

if room = room_level_24
{
    draw_path(path_lv24,xstart,ystart,false);
}

if room = room_level_25
{
    draw_path(path_lv25,xstart,ystart,false);
}

if room = room_level_26
{
    draw_path(path_lv26,xstart,ystart,false);
}


if room = room_survival || room = room_boss
{
    draw_line(view_xview+(view_wview/2),view_yview,view_xview+(view_wview/2),view_yview+view_hview);
}




draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1)
if dead = false
{

//Set size
//draw_size = max(8, min(size+add_size, 128));
draw_size=(draw_size+(sin(degtorad(max(8, min(size+add_size, 128))-draw_size))*12));

//NOTE: DRAW_SIZE = RADIUS!!!!

//draw trail first

if trail = true
{
    //draw_trail(16-((0.5) * ((size + add_size)/64)), draw_size*2, make_color_rgb(196,196,196), -1, true, 0.7)
    //draw_trail(16-((0.5) * ((size + add_size)/64)), draw_size*2, c_black, -1, true, 0.7)
    draw_trail(16-((0.5) * ((size + add_size)/64)), draw_size*2, c_white, -1, true, 0.7)
}



//draw outline second
draw_set_color(c_black)
draw_circle(x,y,draw_size+(2*round(draw_size/64))+1,false)
//draw_circle(x,y,draw_size,false)
draw_set_color(c_white)

//Draw ball normally
//draw_circle_color(x,y,draw_size,c_white,c_white,false);
//draw_circle_color(x,y,draw_size,make_color_rgb(212,212,212),c_white,false);
//draw_circle_color(x,y,draw_size,make_color_rgb(160,160,160),c_white,false);


draw_circle_color(x,y,draw_size,c_white,make_color_rgb(160,160,160),false);
//draw_circle_color(x,y,draw_size-(2*round(draw_size/64))-1,c_white,make_color_rgb(160,160,160),false);


//draw outline old

/*draw_set_color(c_black)
for (i=0;i &lt; (2*round(draw_size/64))+2;i+=1)
{
    draw_circle(x,y,draw_size+i-1,true);
}
draw_set_color(-1)*/


//draw_sprite_ext(sprite_index, image_index, x,y,draw_size/64, draw_size/64,image_angle,image_blend,image_alpha);








}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if room = room_last
{
    game_restart()
}
else
{
    room_goto_next()
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
